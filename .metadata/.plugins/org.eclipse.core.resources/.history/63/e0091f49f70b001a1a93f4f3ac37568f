package kr.or.ddit.member.dao;

import java.io.Reader;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.util.DBUtil;
import kr.or.ddit.util.DBUtil2;
import kr.or.ddit.util.DBUtil3;

public class MemberDaoImpl implements IMemberDao {
	private SqlMapClient smc;
	private static IMemberDao dao;
	
	
	
	private MemberDaoImpl() {
		Reader rd; 
		// 1-1. xml문서 읽어오기
		try{Charset charset = Charset.forName("UTF-8"); // 설정파일 인코딩
		
		Resources.setCharset(charset);
		
		rd = Resources.getResourceAsReader("sqlMapConfig.xml");
		
		// 1-2. 위에서 읽어온 Reader객체를 이용하여
		//		실제 작업을 진행할 객체 생성
		smc = SqlMapClientBuilder.buildSqlMapClient(rd);
		
		rd.close();
		}catch{
			System.out.println("SqlMapClient 실행성공");
		}
	}
	
	public static IMemberDao getInstance() {
		if(dao == null) {
			dao = new MemberDaoImpl();
		}
		return dao;
	}
	
	//  사용했던 자원 반납
		private void disConnect() {
		
	
	}
	

	@Override
	public int insertMember(MemberVO mv) {
		
		int cnt = 0;
		
		try {
			Object obj = smc.insert("member.insertMember", mv);
			if(obj == null) {
				cnt = 1;
			}
			
		}catch(SQLException e) {
			e.printStackTrace();
			
		}
		
		return cnt;
	}

	@Override
	public boolean getMember(String memId) {
		boolean chk = false;
		
		int cnt = 0;
		
		try {
			cnt = (int) smc.queryForObject("member.getMember", memId);
			
			if(cnt > 0) {
				chk = true;
			}
		
		}catch(SQLException e) {
			e.printStackTrace();
		}
			return chk;
		}
	
		@Override
		public List<MemberVO> getAllMemberList() {
		
			List<MemberVO> memList = new ArrayList<MemberVO>();
			
			try {
				memList = smc.queryForList("member.getMemberAll");
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
		return memList;
		}		
		
	
		@Override
		public int updateMember(MemberVO mv) {
			int cnt = 0;
		
			try {
				cnt = smc.update("member.updateMember", mv);
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
		return cnt;
	}

	@Override
	public int deleteMember(String memId) {
		
		int cnt = 0;
		try {
			conn = DBUtil.getConnection();
			String sql = "delete from mymember where mem_id = ? ";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, memId);
			
			cnt = pstmt.executeUpdate();
			
		}catch(SQLException e) {
			e.printStackTrace();
		}finally {
			disConnect();
		}		return cnt;
	}

	
	@Override
	public List<MemberVO> getSearchMember(MemberVO mv) {
		List<MemberVO> memList = new ArrayList<>();
		
		try {
			conn = DBUtil3.getConnection();
			String sql = "select * from mymember where 1=1";
			if(mv.getMem_id() !=null && !mv.getMem_id().equals("")) {
				sql += "  and mem_id = ? ";
			}
			if(mv.getMem_name() !=null && !mv.getMem_name().equals("")) {
				sql += "  and mem_name = ? ";
			}
			if(mv.getMem_tel() !=null && !mv.getMem_tel().equals("")) {
				sql += "  and mem_tel = ? ";
			}
			if(mv.getMem_addr() !=null && !mv.getMem_addr().equals("")) {
				sql += "  and mem_addr like '%' || ? || '%' ";
			}
				pstmt = conn.prepareStatement(sql);
				
				int index = 1;
				if(mv.getMem_id() !=null && !mv.getMem_id().equals("")) {
					pstmt.setString(index++, mv.getMem_id());
					
				}
				if(mv.getMem_name() !=null && !mv.getMem_name().equals("")) {
					pstmt.setString(index++, mv.getMem_name());
					
				}
				if(mv.getMem_tel() !=null && !mv.getMem_tel().equals("")) {
					pstmt.setString(index++, mv.getMem_tel());
					
				}
				if(mv.getMem_addr() !=null && !mv.getMem_addr().equals("")) {
					pstmt.setString(index++, mv.getMem_addr());
					
				}
				
				rs = pstmt.executeQuery();
				
			
				while(rs.next()) {
					
					MemberVO mv2 = new MemberVO();
					mv2.setMem_id(rs.getString("mem_id"));
					mv2.setMem_name(rs.getString("mem_name"));
					mv2.setMem_tel(rs.getString("mem_tel"));
					mv2.setMem_addr(rs.getString("mem_addr"));
					
					memList.add(mv2);
				}
				
		}catch(SQLException e) {
			e.printStackTrace();
		}finally {
			disConnect();
		}
		return memList;
	}

}

































